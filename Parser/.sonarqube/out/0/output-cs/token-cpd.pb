ô
:C:\Users\Home\source\repos\Parser\Parser\Parser\Article.cs
	namespace 	
Parser
 
{ 
public		 

class		 
Article		 
{

 
private 
string 
number 
; 
private 
string 
name 
; 
private 
string 
text 
; 
public 
Article 
( 
string 
name "
," #
string$ *
number+ 1
)1 2
{3 4
this 
. 
name 
= 
name 
; 
this 
. 
number 
= 
number  
;  !
text 
= 
$str 
; 
} 	
public 
void 
addText 
( 
string "
text# '
)' (
{) *
this 
. 
text 
+= 
text 
+ 
$str #
;# $
} 	
public 
string 
getFullName !
(! "
)" #
{$ %
string 
line 
= 
null 
; 
if 
( 
number 
!= 
null 
) 
{  !
line 
= 
$str  
+! "
number# )
;) *
} 
else 
line 
= 
$str 
; 
return 
line 
; 
}   	
public"" 
string"" 
getText"" 
("" 
)"" 
{""  !
if## 
(## 
number## 
!=## 
null## 
)## 
{##  !
if$$ 
($$ 
name$$ 
!=$$ 
null$$  
)$$  !
return$$" (
$str$$) 2
+$$3 4
number$$5 ;
+$$< =
$str$$> H
+$$I J
name$$K O
+$$P Q
$str$$R \
+$$] ^
text$$_ c
;$$c d
return%% 
$str%%  
+%%! "
number%%# )
+%%) *
$str%%+ 5
+%%6 7
text%%8 <
;%%< =
}&& 
return'' 
text'' 
;'' 
}(( 	
})) 
}** ´
:C:\Users\Home\source\repos\Parser\Parser\Parser\Chapter.cs
	namespace 	
Parser
 
{ 
public

 

class

 
Chapter

 
{ 
private 
string 
number 
; 
private 
string 
name 
; 
private 
List 
< 
Article 
> 
articles &
;& '
public 
Chapter 
( 
string 
name "
," #
string# )
number* 0
)0 1
{2 3
this 
. 
name 
= 
name 
; 
this 
. 
number 
= 
number  
;  !
articles 
= 
new 
List 
<  
Article  '
>' (
(( )
)) *
;* +
} 	
public 
void 

addArticle 
( 
Article &
article' .
). /
{0 1
articles 
. 
Add 
( 
article  
)  !
;! "
} 	
public 
string 
getFullName !
(! "
)" #
{$ %
string 
line 
= 
$str #
+# $
number$ *
;* +
if 
( 
name 
!= 
null 
) 
{ 
line 
+= 
$str 
+ 
name #
;# $
} 
return   
line   
;   
}!! 	
public## 
List## 
<## 
Article## 
>## 
getArticles## (
(##( )
)##) *
{##+ ,
return$$ 
articles$$ 
;$$ 
}%% 	
}&& 
}'' ß,
<C:\Users\Home\source\repos\Parser\Parser\Parser\Collector.cs
	namespace 	
Parser
 
{		 
class

 	
	Collector


 
{ 
private 
dataContainer 
data "
;" #
private 
string 
outPath 
; 
public 
	Collector 
( 
dataContainer &
data' +
,+ ,
string- 3
outPath4 ;
); <
{= >
this 
. 
data 
= 
data 
; 
this 
. 
outPath 
= 
outPath "
;" #
mkTree 
( 
) 
; 
} 	
public 
string 
mkTree 
( 
) 
{ 
string 
outLine 
= 
mkdir "
(" #
DateTime# +
.+ ,
Now, /
./ 0
ToString0 8
(8 9
$str9 B
)B C
,C D
outPathE L
)L M
;M N
for 
( 
int 
i 
= 
$num 
; 
i 
< 
data  $
.$ %
	getTitles% .
(. /
)/ 0
.0 1
Count1 6
(6 7
)7 8
;8 9
i: ;
++; =
)= >
{ 
Title 
	currTitle 
=  !
data" &
.& '
	getTitles' 0
(0 1
)1 2
.2 3
	ElementAt3 <
(< =
i= >
)> ?
;? @
string 
outTitle 
=  !
mkdir" '
(' (
	currTitle( 1
.1 2
getName2 9
(9 :
): ;
,; <
outLine= D
)D E
;E F
int 
countChapters !
=" #
	currTitle$ -
.- .
getChapters. 9
(9 :
): ;
.; <
Count< A
(A B
)B C
;C D
for 
( 
int 
j 
= 
$num 
; 
j  !
<" #
countChapters$ 1
;1 2
j3 4
++4 6
)6 7
{ 
Chapter 
currChapter '
=( )
	currTitle* 3
.3 4
getChapters4 ?
(? @
)@ A
.A B
	ElementAtB K
(K L
jL M
)M N
;N O
string 

outChapter %
=& '
mkdir( -
(- .
currChapter. 9
.9 :
getFullName: E
(E F
)F G
,G H
outTitleI Q
)Q R
;R S
int 
countArticles %
=& '
currChapter( 3
.3 4
getArticles4 ?
(? @
)@ A
.A B
CountB G
(G H
)H I
;I J
for   
(   
int   
k   
=    
$num  ! "
;  " #
k  $ %
<  & '
countArticles  ( 5
;  5 6
k  7 8
++  8 :
)  : ;
{!! 
Article"" 
currArticle""  +
="", -
currChapter"". 9
.""9 :
getArticles"": E
(""E F
)""F G
.""G H
	ElementAt""H Q
(""Q R
k""R S
)""S T
;""T U
File## 
.## 
WriteAllText## )
(##) *

outChapter##* 4
+##5 6
$str##7 ;
+##< =
currArticle##> I
.##I J
getFullName##J U
(##U V
)##V W
+##W X
$str##X ]
,##] ^
currArticle##_ j
.##j k
getText##k r
(##r s
)##s t
)##t u
;##u v
}$$ 
}%% 
}&& 
return'' 
outLine'' 
;'' 
}(( 	
private** 
string** 
mkdir** 
(** 
string** #
name**$ (
,**( )
string*** 0
path**1 5
)**5 6
{++ 	
string,, 
path1,, 
=,, 
path,, 
+,,  !
$str,," &
+,,' (
name,,) -
;,,- .
try-- 
{.. 
if00 
(00 
	Directory00 
.00 
Exists00 $
(00$ %
path100% *
)00* +
)00+ ,
{11 
Console22 
.22 
	WriteLine22 %
(22% &
$str22& A
)22A B
;22B C
return33 
null33 
;33  
}44 
DirectoryInfo77 
di77  
=77! "
	Directory77# ,
.77, -
CreateDirectory77- <
(77< =
path177= B
)77B C
;77C D
}== 
catch>> 
(>> 
	Exception>> 
e>> 
)>> 
{?? 
Console@@ 
.@@ 
	WriteLine@@ !
(@@! "
$str@@" ;
,@@; <
e@@= >
.@@> ?
ToString@@? G
(@@G H
)@@H I
)@@I J
;@@J K
}AA 
finallyBB 
{BB 
}BB 
returnCC 
path1CC 
;CC 
}DD 	
}EE 
}FF Ö
@C:\Users\Home\source\repos\Parser\Parser\Parser\dataContainer.cs
	namespace 	
Parser
 
{ 
class		 	
dataContainer		
 
{

 
private 
List 
< 
Title 
> 
titles "
;" #
public 
dataContainer 
( 
List !
<! "
Title" '
>' (
titles( .
). /
{0 1
this 
. 
titles 
= 
titles  
;  !
} 	
public 
List 
< 
Title 
> 
	getTitles $
($ %
)% &
{' (
return 
titles 
; 
} 	
} 
} ¤
9C:\Users\Home\source\repos\Parser\Parser\Parser\Parser.cs
	namespace		 	
Parser		
 
{

 
class 	
Parser
 
{ 
private 
string 
path 
; 
private 
string 
lastLine 
;  
private 
List 
< 
Title 
> 
titles "
;" #
public 
Parser 
( 
string 
path !
)! "
{# $
this 
. 
path 
= 
path 
; 
Parse 
( 
) 
; 
} 	
private 
void 
Parse 
( 
) 
{ 
titles 
= 
new 
List 
< 
Title #
># $
($ %
)% &
;& '
try 
{ 
using 
( 
StreamReader #
sr$ &
=' (
new) ,
StreamReader- 9
(9 :
path: >
,> ?
System@ F
.F G
TextG K
.K L
EncodingL T
.T U
GetEncodingU `
(` a
$numa e
)e f
)f g
)g h
{ 
string 
line 
;  
while 
( 
( 
line  
=! "
sr# %
.% &
ReadLine& .
(. /
)/ 0
)0 1
!=2 4
null5 9
)9 :
{ 
if 
( 
line  
.  !
Contains! )
() *
$str* ?
)? @
)@ A
{B C
do 
{ 
string    &
	nameTitle  ' 0
=  1 2
	makeTitle  3 <
(  < =
line  = A
)  A B
;  B C
titles!!  &
.!!& '
Add!!' *
(!!* +

parseTitle!!+ 5
(!!5 6
sr!!6 8
,!!8 9
	nameTitle!!: C
)!!C D
)!!D E
;!!E F
line""  $
=""% &
lastLine""' /
;""/ 0
}## 
while## #
(##$ %
lastLine##% -
.##- .
Contains##. 6
(##6 7
$str##7 L
)##L M
)##M N
;##N O
}$$ 
}%% 
}&& 
}'' 
catch(( 
((( 
	Exception(( 
e(( 
)(( 
{)) 
Console** 
.** 
	WriteLine** !
(**! "
e**" #
.**# $
Message**$ +
)**+ ,
;**, -
}++ 
},, 	
private.. 
Title.. 

parseTitle..  
(..  !
StreamReader..! -
sr... 0
,..0 1
string..2 8
name..9 =
)..= >
{// 	
Title00 
title00 
=00 
new00 
Title00 #
(00# $
name00$ (
)00( )
;00) *
string11 
line11 
;11 
while22 
(22 
(22 
line22 
=22 
sr22 
.22 
ReadLine22 &
(22& '
)22' (
)22( )
!=22* ,
null22- 1
)221 2
{33 
if44 
(44 
line44 
.44 
Contains44 !
(44! "
$str44" 7
)447 8
)448 9
{55 
do66 
{77 
string88 
numberChapter88 ,
=88- .
makeNumberChapter88/ @
(88@ A
line88A E
)88E F
;88F G
line99 
=99 
sr99 !
.99! "
ReadLine99" *
(99* +
)99+ ,
;99, -
string:: 
nameChapter:: *
=::+ ,
makeNameChapter::- <
(::< =
line::= A
)::A B
;::B C
title;; 
.;; 

addChapter;; (
(;;( )
parseChapter;;) 5
(;;5 6
sr;;6 8
,;;8 9
nameChapter;;: E
,;;E F
numberChapter;;G T
);;T U
);;U V
;;;V W
line<< 
=<< 
lastLine<< '
;<<' (
}== 
while== 
(== 
lastLine== %
.==% &
Contains==& .
(==. /
$str==/ D
)==D E
)==E F
;==F G
if>> 
(>> 
lastLine>>  
.>>  !
Contains>>! )
(>>) *
$str>>* ?
)>>? @
||>>A C
lastLine>>C K
.>>K L
Contains>>L T
(>>T U
$str>>U h
)>>h i
)>>i j
{?? 
break@@ 
;@@ 
}AA 
}BB 
lastLineCC 
=CC 
lineCC 
;CC  
}DD 
returnEE 
titleEE 
;EE 
}FF 	
privateHH 
stringHH 
makeNameChapterHH &
(HH& '
stringHH' -
lineHH. 2
)HH2 3
{II 	
lineJJ 
=JJ 

removeHTMLJJ 
(JJ 
lineJJ "
)JJ" #
;JJ# $
ifKK 
(KK 
lineKK 
==KK 
$strKK 
)KK 
lineKK  
=KK! "
nullKK# '
;KK' (
returnLL 
lineLL 
;LL 
}MM 	
privateOO 
stringOO 
makeNumberChapterOO (
(OO( )
stringOO) /
lineOO0 4
)OO4 5
{PP 	
lineQQ 
=QQ 
	removeStrQQ 
(QQ 
lineQQ !
,QQ! "
$strQQ# ?
)QQ? @
;QQ@ A
lineRR 
=RR 
	removeStrRR 
(RR 
lineRR !
,RR! "
$strRR# -
)RR- .
;RR. /
lineSS 
=SS 

removeHTMLSS 
(SS 
lineSS "
)SS" #
;SS# $
stringTT 
numTT 
=TT 
lineTT 
;TT 
returnUU 
numUU 
;UU 
}VV 	
privateXX 
ChapterXX 
parseChapterXX $
(XX$ %
StreamReaderXX% 1
srXX2 4
,XX4 5
stringXX6 <
nameXX= A
,XXA B
stringXXC I
numberXXJ P
)XXP Q
{YY 	
ChapterZZ 
chapterZZ 
=ZZ 
newZZ !
ChapterZZ" )
(ZZ) *
nameZZ* .
,ZZ. /
numberZZ0 6
)ZZ6 7
;ZZ7 8
string[[ 
line[[ 
;[[ 
if\\ 
(\\ 
name\\ 
!=\\ 
null\\ 
)\\ 
{]] 
while^^ 
(^^ 
(^^ 
line^^ 
=^^ 
sr^^ !
.^^! "
ReadLine^^" *
(^^* +
)^^+ ,
)^^, -
!=^^. 0
null^^1 5
)^^5 6
{__ 
if`` 
(`` 
line`` 
.`` 
Contains`` %
(``% &
$str``& :
)``: ;
)``; <
{aa 
dobb 
{cc 
stringdd "
numberArticledd# 0
=dd1 2
makeNumberArticledd3 D
(ddD E
lineddE I
)ddI J
;ddJ K
stringee "
nameArticleee# .
=ee/ 0
makeNameArticleee1 @
(ee@ A
lineeeA E
)eeE F
;eeF G
chapterff #
.ff# $

addArticleff$ .
(ff. /
parseArticleff/ ;
(ff; <
srff< >
,ff> ?
nameArticleff@ K
,ffK L
numberArticleffM Z
)ffZ [
)ff[ \
;ff\ ]
linegg  
=gg! "
lastLinegg# +
;gg+ ,
}hh 
whilehh 
(hh  !
lastLinehh! )
.hh) *
Containshh* 2
(hh2 3
$strhh3 G
)hhG H
)hhH I
;hhI J
ifii 
(ii 
lastLineii $
.ii$ %
Containsii% -
(ii- .
$strii. I
)iiI J
||iiK M
lastLineiiN V
.iiV W
ContainsiiW _
(ii_ `
$strii` u
)iiu v
)iiv w
{jj 
breakkk !
;kk! "
}ll 
}mm 
}nn 
}oo 
elsepp 
{pp 
chapterqq 
.qq 

addArticleqq "
(qq" #
parseArticleqq# /
(qq/ 0
srqq0 2
,qq2 3
nullqq4 8
,qq8 9
nullqq: >
)qq> ?
)qq? @
;qq@ A
}rr 
returnss 
chapterss 
;ss 
}tt 	
privatevv 
Articlevv 
parseArticlevv $
(vv$ %
StreamReadervv% 1
srvv2 4
,vv4 5
stringvv6 <
nameArticlevv= H
,vvH I
stringvvJ P
numberArticlevvQ ^
)vv^ _
{ww 	
Articlexx 
articlexx 
=xx 
newxx !
Articlexx" )
(xx) *
nameArticlexx* 5
,xx5 6
numberArticlexx6 C
)xxC D
;xxD E
stringyy 
lineyy 
;yy 
ifzz 
(zz 
nameArticlezz 
==zz 
nullzz #
&&zz$ &
numberArticlezz' 4
==zz5 7
nullzz8 <
)zz< =
{zz> ?
linezz@ D
=zzE F
	parseTextzzG P
(zzP Q
srzzQ S
)zzS T
;zzT U
articlezzV ]
.zz] ^
addTextzz^ e
(zze f
linezzf j
)zzj k
;zzk l
}zzm n
while{{ 
({{ 
({{ 
line{{ 
={{ 
sr{{ 
.{{ 
ReadLine{{ &
({{& '
){{' (
){{( )
!={{* ,
null{{- 1
){{1 2
{|| 
if}} 
(}} 
line}} 
.}} 
Contains}} !
(}}! "
$str}}" 3
)}}3 4
)}}4 5
{~~ 
line 
= 
sr 
. 
ReadLine &
(& '
)' (
;( )
if
 
(
 
line
 
.
 
Contains
 %
(
% &
$str
& @
)
@ A
||
B D
line
E I
.
I J
Contains
J R
(
R S
$str
S n
)
n o
||
o q
line
r v
.
v w
Contains
w 
( 
$str 
) 
) 
{
 
lastLine
  
=
! "
line
# '
;
' (
break
 
;
 
}
 
line
 
=
 

removeHTML
 %
(
% &
line
& *
)
* +
;
+ ,
article
 
.
 
addText
 #
(
# $
line
$ (
)
( )
;
) *
}
 
if
 
(
 
line
 
.
 
Contains
 !
(
! "
$str
" <
)
< =
||
> @
line
A E
.
E F
Contains
F N
(
N O
$str
O j
)
j k
||
k m
line
n r
.
r s
Contains
s {
(
{ |
$str| 
) 
|| 
line 
. 
Contains ¡
(¡ ¢
$str¢ µ
)µ ¶
)¶ ·
{
 
lastLine
 
=
 
line
 #
;
# $
break
 
;
 
}
 
if
 
(
 
line
 
.
 
Contains
 !
(
! "
$str
" 6
)
6 7
)
7 8
{
9 :
line
 
=
 

removeHTML
 %
(
% &
line
& *
)
* +
;
+ ,
article
 
.
 
addText
 #
(
# $
line
$ (
)
( )
;
) *
}
 
}
 
return
 
article
 
;
 
}
 	
private
 
string
 
	parseText
  
(
  !
StreamReader
! -
sr
. 0
)
0 1
{
2 3
string
 
text
 
;
 
text
 
=
 
sr
 
.
 
ReadLine
 
(
 
)
  
;
  !
text
 
=
 

removeHTML
 
(
 
text
 "
)
" #
;
# $
return
 
text
 
;
 
}
 	
public
 
string
 

removeHTML
  
(
  !
string
! '
line
( ,
)
, -
{
. /
return
 
Regex
 
.
 
Replace
  
(
  !
line
! %
,
% &
$str
' .
,
. /
String
0 6
.
6 7
Empty
7 <
)
< =
;
= >
}
 	
private
   
string
   
makeNameArticle
   &
(
  & '
string
  ' -
line
  . 2
)
  2 3
{
¡¡ 	
string
¢¢ 
str
¢¢ 
=
¢¢ 
line
¢¢ 
;
¢¢ 
str
££ 
=
££ 

removeHTML
££ 
(
££ 
str
££  
)
££  !
;
££! "
int
¤¤ 
index
¤¤ 
=
¤¤ 
str
¤¤ 
.
¤¤ 
IndexOf
¤¤ #
(
¤¤# $
$str
¤¤$ '
)
¤¤' (
;
¤¤( )
string
¥¥ 
	cleanPath
¥¥  
=
¥¥! "
(
¥¥# $
index
¥¥$ )
<
¥¥* +
$num
¥¥, -
)
¥¥- .
?
¦¦ 
str
¦¦ 
:
§§ 
str
§§ 
.
§§ 
Remove
§§  
(
§§  !
$num
§§! "
,
§§" #
index
§§$ )
+
§§) *
$num
§§* +
)
§§+ ,
;
§§, -
str
¨¨ 
=
¨¨ 
	cleanPath
¨¨ 
;
¨¨  
return
©© 
str
©© 
;
©© 
}
ªª 	
private
¬¬ 
string
¬¬ 
makeNumberArticle
¬¬ (
(
¬¬( )
string
¬¬) /
line
¬¬0 4
)
¬¬4 5
{
­­ 	
string
®® 
str
®® 
=
®® 
line
®® 
;
®® 
str
¯¯ 
=
¯¯ 
	removeStr
¯¯ 
(
¯¯ 
str
¯¯ 
,
¯¯  
$str
¯¯! *
)
¯¯* +
;
¯¯+ ,
str
°° 
=
°° 

removeHTML
°° 
(
°° 
str
°°  
)
°°  !
;
°°! "
int
±± 
index
±± 
=
±± 
str
±± 
.
±± 
IndexOf
±± #
(
±±# $
$str
±±$ '
)
±±' (
;
±±( )
string
²² 
	cleanPath
²² 
=
²² 
(
²²  
index
²²  %
<
²²& '
$num
²²( )
)
²²) *
?
³³ 
str
³³ 
:
´´ 
str
´´ 
.
´´ 
Remove
´´ 
(
´´ 
index
´´ "
,
´´" #
str
´´$ '
.
´´' (
Length
´´( .
-
´´. /
index
´´/ 4
)
´´4 5
;
´´5 6
return
µµ 
	cleanPath
µµ 
;
µµ 
}
¶¶ 	
public
¸¸ 
string
¸¸ 
	makeTitle
¸¸ 
(
¸¸  
string
¸¸  &
line
¸¸' +
)
¸¸+ ,
{
¸¸- .
line
¹¹ 
=
¹¹ 
	removeStr
¹¹ 
(
¹¹ 
line
¹¹ !
,
¹¹! "
$str
¹¹# 8
)
¹¹8 9
;
¹¹9 :
line
ºº 
=
ºº 
	removeStr
ºº 
(
ºº 
line
ºº !
,
ºº! "
$str
ºº# 0
)
ºº0 1
;
ºº1 2
return
»» 
line
»» 
;
»» 
}
¼¼ 	
public
¾¾ 
string
¾¾ 
	removeStr
¾¾ 
(
¾¾  
string
¾¾  &
sourceString
¾¾' 3
,
¾¾3 4
string
¾¾5 ;
removeString
¾¾< H
)
¾¾H I
{
¾¾J K
int
¿¿ 
index
¿¿ 
=
¿¿ 
sourceString
¿¿ $
.
¿¿$ %
IndexOf
¿¿% ,
(
¿¿, -
removeString
¿¿- 9
)
¿¿9 :
;
¿¿: ;
string
ÀÀ 
	cleanPath
ÀÀ 
=
ÀÀ 
(
ÀÀ  
index
ÀÀ  %
<
ÀÀ& '
$num
ÀÀ( )
)
ÀÀ) *
?
ÁÁ 
sourceString
ÁÁ 
:
ÂÂ 
sourceString
ÂÂ 
.
ÂÂ 
Remove
ÂÂ %
(
ÂÂ% &
index
ÂÂ& +
,
ÂÂ+ ,
removeString
ÂÂ- 9
.
ÂÂ9 :
Length
ÂÂ: @
)
ÂÂ@ A
;
ÂÂA B
return
ÃÃ 
	cleanPath
ÃÃ 
;
ÃÃ 
}
ÄÄ 	
private
ÆÆ 
static
ÆÆ 

Dictionary
ÆÆ !
<
ÆÆ! "
char
ÆÆ" &
,
ÆÆ& '
int
ÆÆ( +
>
ÆÆ+ ,
RomanMap
ÆÆ- 5
=
ÆÆ6 7
new
ÆÆ8 ;

Dictionary
ÆÆ< F
<
ÆÆF G
char
ÆÆG K
,
ÆÆK L
int
ÆÆM P
>
ÆÆP Q
(
ÆÆQ R
)
ÆÆR S
{
ÇÇ 	
{
ÈÈ 
$char
ÈÈ 
,
ÈÈ 
$num
ÈÈ 
}
ÈÈ 
,
ÈÈ 
{
ÉÉ 
$char
ÉÉ 
,
ÉÉ 
$num
ÉÉ 
}
ÉÉ 
,
ÉÉ 
{
ÊÊ 
$char
ÊÊ 
,
ÊÊ 
$num
ÊÊ 
}
ÊÊ 
,
ÊÊ 
{
ËË 
$char
ËË 
,
ËË 
$num
ËË 
}
ËË 
,
ËË 
{
ÌÌ 
$char
ÌÌ 
,
ÌÌ 
$num
ÌÌ 
}
ÌÌ 
,
ÌÌ 
{
ÍÍ 
$char
ÍÍ 
,
ÍÍ 
$num
ÍÍ 
}
ÍÍ 
,
ÍÍ 
{
ÎÎ 
$char
ÎÎ 
,
ÎÎ 
$num
ÎÎ 
}
ÎÎ 
}
ÏÏ 	
;
ÏÏ	 

public
ÐÐ 
static
ÐÐ 
int
ÐÐ 
RomanToInteger
ÐÐ (
(
ÐÐ( )
string
ÐÐ) /
roman
ÐÐ0 5
)
ÐÐ5 6
{
ÑÑ 	
int
ÒÒ 
number
ÒÒ 
=
ÒÒ 
$num
ÒÒ 
;
ÒÒ 
for
ÓÓ 
(
ÓÓ 
int
ÓÓ 
i
ÓÓ 
=
ÓÓ 
$num
ÓÓ 
;
ÓÓ 
i
ÓÓ 
<
ÓÓ 
roman
ÓÓ  %
.
ÓÓ% &
Length
ÓÓ& ,
;
ÓÓ, -
i
ÓÓ. /
++
ÓÓ/ 1
)
ÓÓ1 2
{
ÔÔ 
if
ÕÕ 
(
ÕÕ 
i
ÕÕ 
+
ÕÕ 
$num
ÕÕ 
<
ÕÕ 
roman
ÕÕ !
.
ÕÕ! "
Length
ÕÕ" (
&&
ÕÕ) +
RomanMap
ÕÕ, 4
[
ÕÕ4 5
roman
ÕÕ5 :
[
ÕÕ: ;
i
ÕÕ; <
]
ÕÕ< =
]
ÕÕ= >
<
ÕÕ? @
RomanMap
ÕÕA I
[
ÕÕI J
roman
ÕÕJ O
[
ÕÕO P
i
ÕÕP Q
+
ÕÕR S
$num
ÕÕT U
]
ÕÕU V
]
ÕÕV W
)
ÕÕW X
{
ÖÖ 
number
×× 
-=
×× 
RomanMap
×× &
[
××& '
roman
××' ,
[
××, -
i
××- .
]
××. /
]
××/ 0
;
××0 1
}
ØØ 
else
ÙÙ 
{
ÚÚ 
number
ÛÛ 
+=
ÛÛ 
RomanMap
ÛÛ &
[
ÛÛ& '
roman
ÛÛ' ,
[
ÛÛ, -
i
ÛÛ- .
]
ÛÛ. /
]
ÛÛ/ 0
;
ÛÛ0 1
}
ÜÜ 
}
ÝÝ 
return
ÞÞ 
number
ÞÞ 
;
ÞÞ 
}
ßß 	
public
áá 
dataContainer
áá 
getData
áá $
(
áá$ %
)
áá% &
{
áá' (
dataContainer
ââ 
data
ââ 
=
ââ  
new
ââ! $
dataContainer
ââ% 2
(
ââ2 3
titles
ââ3 9
)
ââ9 :
;
ââ: ;
return
ãã 
data
ãã 
;
ãã 
}
ää 	
}
åå 
}ææ º
:C:\Users\Home\source\repos\Parser\Parser\Parser\Program.cs
	namespace 	
Parser
 
{		 
class

 	
Program


 
{ 
static 
void 
Main 
( 
string 
[  
]  !
args" &
)& '
{ 	
Console 
. 
	WriteLine 
( 
$str	 Û
)
Û Ü
;
Ü Ý
Console 
. 
	WriteLine 
( 
$str ;
); <
;< =
string 
path 
= 
@Console "
." #
ReadLine# +
(+ ,
), -
;- .
Console 
. 
	WriteLine 
( 
$str +
)+ ,
;, -
string 
outpath 
= 
@Console %
.% &
ReadLine& .
(. /
)/ 0
;0 1
Parser 
parser 
= 
new 
Parser  &
(& '
path' +
)+ ,
;, -
	Collector 
	collector 
=  !
new" %
	Collector& /
(/ 0
parser0 6
.6 7
getData7 >
(> ?
)? @
,@ A
outpathB I
)I J
;J K
Console 
. 
ReadKey 
( 
) 
; 
} 	
} 
} õ
JC:\Users\Home\source\repos\Parser\Parser\Parser\Properties\AssemblyInfo.cs
[ 
assembly 	
:	 

AssemblyTitle 
( 
$str !
)! "
]" #
[		 
assembly		 	
:			 

AssemblyDescription		 
(		 
$str		 !
)		! "
]		" #
[

 
assembly

 	
:

	 
!
AssemblyConfiguration

  
(

  !
$str

! #
)

# $
]

$ %
[ 
assembly 	
:	 

AssemblyCompany 
( 
$str 
) 
] 
[ 
assembly 	
:	 

AssemblyProduct 
( 
$str #
)# $
]$ %
[ 
assembly 	
:	 

AssemblyCopyright 
( 
$str 0
)0 1
]1 2
[ 
assembly 	
:	 

AssemblyTrademark 
( 
$str 
)  
]  !
[ 
assembly 	
:	 

AssemblyCulture 
( 
$str 
) 
] 
[ 
assembly 	
:	 


ComVisible 
( 
false 
) 
] 
[ 
assembly 	
:	 

Guid 
( 
$str 6
)6 7
]7 8
[## 
assembly## 	
:##	 

AssemblyVersion## 
(## 
$str## $
)##$ %
]##% &
[$$ 
assembly$$ 	
:$$	 

AssemblyFileVersion$$ 
($$ 
$str$$ (
)$$( )
]$$) *Ï
8C:\Users\Home\source\repos\Parser\Parser\Parser\Title.cs
	namespace 	
Parser
 
{ 
class		 	
Title		
 
{

 
private 
string 
name 
; 
private 
List 
< 
Chapter 
> 
chapters &
;& '
public 
Title 
( 
string 
name  
)  !
{" #
this 
. 
name 
= 
name 
; 
chapters 
= 
new 
List 
<  
Chapter  '
>' (
(( )
)) *
;* +
} 	
public 
void 

addChapter 
( 
Chapter &
chapter' .
). /
{0 1
chapters 
. 
Add 
( 
chapter  
)  !
;! "
} 	
public 
string 
getName 
( 
) 
{  !
return 
name 
; 
} 	
public 
List 
< 
Chapter 
> 
getChapters (
(( )
)) *
{+ ,
return 
chapters 
; 
} 	
} 
} 